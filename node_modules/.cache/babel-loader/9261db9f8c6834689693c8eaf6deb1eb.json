{"ast":null,"code":"var _jsxFileName = \"/home/aytac/Documents/react-editable-table/src/context/EmployeesContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\nimport data from '../data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EmployeesContext = /*#__PURE__*/createContext();\n\nconst EmployeesContextProvider = props => {\n  _s();\n\n  let copyOfData = JSON.parse(JSON.stringify(data));\n  const [employees, setEmployees] = useState([...copyOfData]);\n  const [updatedEmployees, setUpdatedEmployees] = useState([]);\n  const [deletedEmployees, setDeletedEmployees] = useState([]);\n  const [isModalOpened, setIsModalOpened] = useState(false);\n  const [updatedAndDeletedEmployees, setUpdatedAndDeletedEmployees] = useState({});\n  const [currentEmployees, setCurrentEmployees] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const employeesPerPage = 10;\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isSearched, setIsSearched] = useState(false); // DELETE EMPLOYEE\n\n  const deleteEmployee = inputId => {\n    let tempEmployees = [...employees];\n    const mappedEmployees = tempEmployees.map(employee => {\n      if (employee.inputId === inputId) {\n        if (employee.isDeleted) {\n          employee.isDeleted = false;\n        } else if (!employee.isDeleted) {\n          employee.isDeleted = true;\n        }\n      }\n\n      return employee;\n    });\n    const markedAsDeletedEmployees = mappedEmployees.filter(employee => employee.isDeleted === true);\n    setDeletedEmployees(markedAsDeletedEmployees);\n    setEmployees(mappedEmployees);\n  }; // GET UPDATED AND DELETED LISTS\n\n\n  const showModal = () => {\n    setIsModalOpened(!isModalOpened);\n    const notDeletedEmployees = updatedEmployees.filter(updatedEmployee => updatedEmployee.isDeleted !== true);\n    let updatedAndDeletedEmployees = {\n      updated: [...notDeletedEmployees],\n      deleted: [...deletedEmployees]\n    }; // console.log(updatedAndDeletedEmployees)\n\n    setUpdatedAndDeletedEmployees(updatedAndDeletedEmployees);\n  }; // RESET DATA\n\n\n  const resetData = () => {\n    let copyOfData = JSON.parse(JSON.stringify(data));\n    setEmployees(copyOfData);\n    setDeletedEmployees([]);\n    setUpdatedEmployees([]);\n  }; // EDITING TABLE CELLS\n\n\n  const handleEmployeeTableCell = e => {\n    let str = e.target.id;\n    let arr = str.split(\"\");\n    arr.splice(str.length - 6, str.length);\n    let idStr = arr.join('');\n    let item = {\n      id: idStr,\n      name: e.target.name,\n      value: e.target.value,\n      type: e.target.type\n    };\n    let copyOfEmployeesArr = employees.slice();\n    const textRegex = /([0-9-!$@#%^&*()_+|~=`{}\\[\\]:\";'<>?,.\\\\\\/])+/ig; // eslint-disable-line\n\n    const positionTextRegex = /([0-9!$@#%^*_+~=`\\[\\]\";'<>?.])+/ig; // eslint-disable-line\n\n    const phoneRegex = /^\\+(?:[0-9] ?){7,15}[0-9]$/;\n    let editedEmployees = copyOfEmployeesArr.map(employee => {\n      for (let key in employee) {\n        if (key === item.name && employee.inputId === item.id) {\n          if (item.type === 'tel') {\n            if (phoneRegex.test(item.value)) {\n              employee[key] = item.value;\n            } else if (!phoneRegex.test(item.value)) {\n              break;\n            }\n          } else if (item.type === 'text' && item.name !== 'id' && item.type !== 'tel' && (item.name === 'name' || item.name === 'surname')) {\n            if (!textRegex.test(item.value) && item.value !== '') {\n              employee[key] = item.value;\n            } else if (textRegex.test(item.value) || item.value === '') {\n              break;\n            }\n          } else if (item.type === 'text' && item.name !== 'id' && item.type !== 'tel' && item.name === 'position') {\n            if (!positionTextRegex.test(item.value) && item.value !== '') {\n              employee[key] = item.value;\n            } else if (positionTextRegex.test(item.value) || item.value === '') {\n              break;\n            }\n          } else {\n            employee[key] = item.value;\n          }\n        }\n      }\n\n      return employee;\n    });\n    setEmployees(editedEmployees);\n  }; // COMPARE INITIAL AND UPDATED\n\n\n  useEffect(() => {\n    let copyOfDataArr = JSON.parse(JSON.stringify(data));\n    let copyOfEmployeesArr = employees.slice();\n    const comparedEmloyeesArr = copyOfEmployeesArr.filter(employeeObj => {\n      return !copyOfDataArr.some(copyEmployeeObj => {\n        return copyEmployeeObj.id === employeeObj.id && copyEmployeeObj.name === employeeObj.name && copyEmployeeObj.surname === employeeObj.surname && copyEmployeeObj.dateOfBirth === employeeObj.dateOfBirth && copyEmployeeObj.position === employeeObj.position && copyEmployeeObj.phoneNumber === employeeObj.phoneNumber;\n      });\n    });\n    setUpdatedEmployees(comparedEmloyeesArr);\n  }, [employees]); // useEffect(() => {\n  //   console.log(updatedEmployees)\n  // }, [updatedEmployees])\n  // useEffect(() => {\n  //   console.log(deletedEmployees)\n  // }, [deletedEmployees])\n  // PAGINATION\n\n  const paginate = useCallback(pageNumber => {\n    const indexOfLastEmployee = pageNumber * employeesPerPage;\n    const indexOfFirstEmployee = indexOfLastEmployee - employeesPerPage;\n    const currentEmployees = employees.slice(indexOfFirstEmployee, indexOfLastEmployee);\n    setCurrentEmployees(currentEmployees);\n    setCurrentPage(pageNumber);\n  }, [employeesPerPage, employees]);\n  useEffect(() => {\n    paginate(currentPage);\n  }, [currentPage, paginate]); // HANDLE INPUT CHANGE EVENT\n\n  const handleChange = e => {\n    setSearchTerm(e.target.value);\n  }; // GET SEARCH RESULT\n\n\n  const getSearchResult = useCallback(() => {\n    const dateOfBirthRegex = /\\s+|[\\/-]/g; // eslint-disable-line\n\n    let results = [];\n    let copyOfEmployeesArr = employees.slice();\n\n    if (searchTerm === '' || searchTerm === null || searchTerm === ' ') {\n      setIsSearched(false);\n      paginate(currentPage);\n    } else {\n      results = copyOfEmployeesArr.filter(employee => employee.name.toLowerCase().includes(searchTerm.toLowerCase()) || employee.surname.toLowerCase().includes(searchTerm.toLowerCase()) || employee.id.toLowerCase().includes(searchTerm.toLowerCase()) || employee.dateOfBirth.replace(dateOfBirthRegex, '').includes(searchTerm.replace(dateOfBirthRegex, '')) || employee.position.toLowerCase().includes(searchTerm.toLowerCase()) || employee.phoneNumber.replace(/\\s+/g, '').includes(searchTerm.replace(/\\s+/g, '')));\n      setIsSearched(true);\n      setCurrentEmployees(results);\n    }\n  }, [searchTerm, employees, currentPage, paginate]); // GET RESULTS ON CHANGE EVENT (WHILE TYPING)\n\n  useEffect(() => {\n    getSearchResult();\n  }, [getSearchResult]); // GET RESULTS ON SUBMIT EVENT (AFTER CLICKING SEARCH ICON)\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    getSearchResult();\n  };\n\n  return /*#__PURE__*/_jsxDEV(EmployeesContext.Provider, {\n    value: {\n      employees,\n      updatedEmployees,\n      deletedEmployees,\n      isModalOpened,\n      updatedAndDeletedEmployees,\n      deleteEmployee,\n      showModal,\n      resetData,\n      handleEmployeeTableCell,\n      currentEmployees,\n      employeesPerPage,\n      currentPage,\n      paginate,\n      searchTerm,\n      isSearched,\n      handleChange,\n      handleSubmit\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EmployeesContextProvider, \"Z5AGUrxyP68jm7YkEiPqGek+lQw=\");\n\n_c = EmployeesContextProvider;\nexport default EmployeesContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmployeesContextProvider\");","map":{"version":3,"sources":["/home/aytac/Documents/react-editable-table/src/context/EmployeesContext.js"],"names":["React","createContext","useState","useEffect","useCallback","data","EmployeesContext","EmployeesContextProvider","props","copyOfData","JSON","parse","stringify","employees","setEmployees","updatedEmployees","setUpdatedEmployees","deletedEmployees","setDeletedEmployees","isModalOpened","setIsModalOpened","updatedAndDeletedEmployees","setUpdatedAndDeletedEmployees","currentEmployees","setCurrentEmployees","currentPage","setCurrentPage","employeesPerPage","searchTerm","setSearchTerm","isSearched","setIsSearched","deleteEmployee","inputId","tempEmployees","mappedEmployees","map","employee","isDeleted","markedAsDeletedEmployees","filter","showModal","notDeletedEmployees","updatedEmployee","updated","deleted","resetData","handleEmployeeTableCell","e","str","target","id","arr","split","splice","length","idStr","join","item","name","value","type","copyOfEmployeesArr","slice","textRegex","positionTextRegex","phoneRegex","editedEmployees","key","test","copyOfDataArr","comparedEmloyeesArr","employeeObj","some","copyEmployeeObj","surname","dateOfBirth","position","phoneNumber","paginate","pageNumber","indexOfLastEmployee","indexOfFirstEmployee","handleChange","getSearchResult","dateOfBirthRegex","results","toLowerCase","includes","replace","handleSubmit","preventDefault","children"],"mappings":"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","sourcesContent":["import React, {createContext, useState, useEffect, useCallback} from 'react'\nimport data from '../data';\n\nexport const EmployeesContext = createContext()\n\nconst EmployeesContextProvider = (props) => {\n    let copyOfData = JSON.parse(JSON.stringify(data))\n    const [employees, setEmployees] = useState([...copyOfData])\n    const [updatedEmployees, setUpdatedEmployees] = useState([])\n    const [deletedEmployees, setDeletedEmployees] = useState([])\n    const [isModalOpened, setIsModalOpened] = useState(false)\n    const [updatedAndDeletedEmployees, setUpdatedAndDeletedEmployees] = useState({})\n    const [currentEmployees, setCurrentEmployees] = useState([])\n    const [currentPage, setCurrentPage] = useState(1)\n    const employeesPerPage = 10\n\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [isSearched, setIsSearched] = useState(false);\n    \n    // DELETE EMPLOYEE\n    const deleteEmployee = (inputId) =>{\n        let tempEmployees = [...employees];\n        const mappedEmployees = tempEmployees.map(employee => {\n          if(employee.inputId === inputId){\n            if(employee.isDeleted){\n              employee.isDeleted = false;\n            }\n            else if(!employee.isDeleted){\n              employee.isDeleted = true;\n            }\n          }\n          return employee\n        })\n\n        const markedAsDeletedEmployees = mappedEmployees.filter(employee=> employee.isDeleted === true)\n        setDeletedEmployees(markedAsDeletedEmployees)\n        setEmployees(mappedEmployees)\n    }\n    \n    // GET UPDATED AND DELETED LISTS\n    const showModal = ()=> {\n      setIsModalOpened(!isModalOpened)\n      const notDeletedEmployees = updatedEmployees.filter(updatedEmployee=> updatedEmployee.isDeleted !== true)\n      let updatedAndDeletedEmployees = {\n        updated: [...notDeletedEmployees],\n        deleted: [...deletedEmployees]\n      }\n      // console.log(updatedAndDeletedEmployees)\n      setUpdatedAndDeletedEmployees(updatedAndDeletedEmployees)\n    }\n      \n    // RESET DATA\n    const resetData = ()=> {\n      let copyOfData = JSON.parse(JSON.stringify(data))\n      setEmployees(copyOfData)\n      setDeletedEmployees([])\n      setUpdatedEmployees([])\n      \n    }\n    \n    // EDITING TABLE CELLS\n    const handleEmployeeTableCell = (e) => {\n      let str = e.target.id;\n      let arr = str.split(\"\");\n      arr.splice(str.length - 6, str.length);\n      let idStr = arr.join('');\n  \n      let item = {\n        id: idStr,\n        name: e.target.name,\n        value: e.target.value,\n        type: e.target.type\n      };\n      let copyOfEmployeesArr = employees.slice();\n\n      const textRegex = /([0-9-!$@#%^&*()_+|~=`{}\\[\\]:\";'<>?,.\\\\\\/])+/ig// eslint-disable-line\n      const positionTextRegex = /([0-9!$@#%^*_+~=`\\[\\]\";'<>?.])+/ig// eslint-disable-line\n      const phoneRegex = /^\\+(?:[0-9] ?){7,15}[0-9]$/;\n    \n  \n      let editedEmployees = copyOfEmployeesArr.map(employee=> {\n        for (let key in employee) {\n            if (key === item.name && employee.inputId === item.id) {\n              if(item.type==='tel'){\n                if(phoneRegex.test(item.value)){\n                  employee[key] = item.value;\n                }\n                else if(!phoneRegex.test(item.value)){\n                  break                  \n                }\n              }\n              else if(item.type==='text' && item.name!=='id'&&item.type!=='tel'&&(item.name==='name'||item.name==='surname')){\n                if(!textRegex.test(item.value) && item.value !==''){\n                  employee[key] = item.value;\n                }\n                else if(textRegex.test(item.value) || item.value ===''){\n                  break\n                }\n              }\n              else if(item.type==='text' && item.name!=='id'&&item.type!=='tel'&&item.name==='position'){\n                if(!positionTextRegex.test(item.value) && item.value !==''){\n                  employee[key] = item.value;\n                }\n                else if(positionTextRegex.test(item.value) || item.value ===''){\n                  break\n                }\n              }\n              else{\n                 employee[key] = item.value;\n\n              }\n            }\n        }\n        return employee;\n      });\n\n        setEmployees(editedEmployees);  \n    };\n    \n    // COMPARE INITIAL AND UPDATED\n    useEffect(() => {\n      let copyOfDataArr = JSON.parse(JSON.stringify(data))\n      let copyOfEmployeesArr = employees.slice();    \n  \n      const comparedEmloyeesArr = copyOfEmployeesArr.filter(employeeObj=>{\n        return !copyOfDataArr.some(copyEmployeeObj=>{       \n          return copyEmployeeObj.id === employeeObj.id && copyEmployeeObj.name === employeeObj.name  && copyEmployeeObj.surname === employeeObj.surname && copyEmployeeObj.dateOfBirth === employeeObj.dateOfBirth && copyEmployeeObj.position === employeeObj.position && copyEmployeeObj.phoneNumber === employeeObj.phoneNumber      \n        });\n      });\n      setUpdatedEmployees(comparedEmloyeesArr)\n    },[employees])\n\n     // useEffect(() => {\n    //   console.log(updatedEmployees)\n    // }, [updatedEmployees])\n\n    // useEffect(() => {\n    //   console.log(deletedEmployees)\n    // }, [deletedEmployees])\n\n    // PAGINATION\n    const paginate = useCallback((pageNumber) => {\n        const indexOfLastEmployee = pageNumber * employeesPerPage;\n        const indexOfFirstEmployee = indexOfLastEmployee - employeesPerPage;\n        const currentEmployees = employees.slice(indexOfFirstEmployee, indexOfLastEmployee);\n        setCurrentEmployees(currentEmployees)\n        setCurrentPage(pageNumber)\n    }, [employeesPerPage, employees])\n\n    useEffect(() => {\n      paginate(currentPage)\n    }, [currentPage, paginate])\n\n    // HANDLE INPUT CHANGE EVENT\n    const handleChange = e => {\n      setSearchTerm(e.target.value);\n    };\n    // GET SEARCH RESULT\n    const getSearchResult = useCallback(() => {\n      const  dateOfBirthRegex = /\\s+|[\\/-]/g// eslint-disable-line\n      let results = []\n      let copyOfEmployeesArr = employees.slice();\n      if(searchTerm === ''|| searchTerm === null || searchTerm === ' '){\n        setIsSearched(false)\n        paginate(currentPage)\n      }\n      else{\n        results = copyOfEmployeesArr.filter(employee => \n          employee.name.toLowerCase().includes(searchTerm.toLowerCase()) || employee.surname.toLowerCase().includes(searchTerm.toLowerCase()) || employee.id.toLowerCase().includes(searchTerm.toLowerCase()) || employee.dateOfBirth.replace(dateOfBirthRegex, '').includes(searchTerm.replace(dateOfBirthRegex, '')) || employee.position.toLowerCase().includes(searchTerm.toLowerCase()) || employee.phoneNumber.replace(/\\s+/g, '').includes(searchTerm.replace(/\\s+/g, ''))\n          )\n          setIsSearched(true)\n          setCurrentEmployees(results);\n      }\n\n    }, [searchTerm, employees,currentPage, paginate])\n\n\n    // GET RESULTS ON CHANGE EVENT (WHILE TYPING)\n    useEffect(() => {\n      getSearchResult()   \n    },[getSearchResult]);  \n    \n    // GET RESULTS ON SUBMIT EVENT (AFTER CLICKING SEARCH ICON)\n    const handleSubmit = e => {\n      e.preventDefault()\n      getSearchResult()   \n    };\n   \n\n    return (\n        <EmployeesContext.Provider value={{employees,updatedEmployees,deletedEmployees,isModalOpened,updatedAndDeletedEmployees,deleteEmployee,showModal,resetData,handleEmployeeTableCell,currentEmployees,employeesPerPage, currentPage, paginate, searchTerm, isSearched, handleChange, handleSubmit}}>\n            {props.children}\n        </EmployeesContext.Provider>\n    )\n}\n\nexport default EmployeesContextProvider\n"]},"metadata":{},"sourceType":"module"}