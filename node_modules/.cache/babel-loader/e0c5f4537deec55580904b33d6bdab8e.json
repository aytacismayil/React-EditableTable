{"ast":null,"code":"var _jsxFileName = \"/home/aytac/Documents/react-editable-table/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport UpdatedEmployeesList from './pages/UpdatedEmployeesList';\nimport DeletedEmployeesList from './pages/DeletedEmployeesList';\nimport Grid from './pages/Grid';\nimport Navbar from './components/Navbar';\nimport Error from './pages/Error';\nimport data from './data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  let copyOfData = JSON.parse(JSON.stringify(data));\n  const [employees, setEmployees] = useState([...copyOfData]);\n  const [updatedEmployees, setUpdatedEmployees] = useState([]);\n  const [deletedEmployees, setDeletedEmployees] = useState([]);\n  const [isModalOpened, setIsModalOpened] = useState(false);\n  const [updatedAndDeletedEmployees, setUpdatedAndDeletedEmployees] = useState({});\n  const [currentEmployees, setCurrentEmployees] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const employeesPerPage = 10;\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isSearched, setIsSearched] = useState(false); // DELETE EMPLOYEE\n\n  const deleteEmployee = inputId => {\n    let tempEmployees = [...employees];\n    const mappedEmployees = tempEmployees.map(employee => {\n      if (employee.inputId === inputId) {\n        if (employee.isDeleted) {\n          employee.isDeleted = false;\n        } else if (!employee.isDeleted) {\n          employee.isDeleted = true;\n        }\n      }\n\n      return employee;\n    });\n    const markedAsDeletedEmployees = mappedEmployees.filter(employee => employee.isDeleted === true);\n    setDeletedEmployees(markedAsDeletedEmployees);\n    setEmployees(mappedEmployees);\n  }; // GET UPDATED AND DELETED LISTS\n\n\n  const showModal = () => {\n    setIsModalOpened(!isModalOpened);\n    const notDeletedEmployees = updatedEmployees.filter(updatedEmployee => updatedEmployee.isDeleted !== true);\n    let updatedAndDeletedEmployees = {\n      updated: [...notDeletedEmployees],\n      deleted: [...deletedEmployees]\n    }; // console.log(updatedAndDeletedEmployees)\n\n    setUpdatedAndDeletedEmployees(updatedAndDeletedEmployees);\n  }; // RESET DATA\n\n\n  const resetData = () => {\n    let copyOfData = JSON.parse(JSON.stringify(data));\n    setEmployees(copyOfData);\n    setDeletedEmployees([]);\n    setUpdatedEmployees([]);\n  }; // EDITING TABLE CELLS\n\n\n  const handleEmployeeTableCell = e => {\n    let str = e.target.id;\n    let arr = str.split(\"\");\n    arr.splice(str.length - 6, str.length);\n    let idStr = arr.join('');\n    let item = {\n      id: idStr,\n      name: e.target.name,\n      value: e.target.value,\n      type: e.target.type\n    };\n    let copyOfEmployeesArr = employees.slice();\n    const textRegex = /([0-9-!$@#%^&*()_+|~=`{}\\[\\]:\";'<>?,.\\\\\\/])+/ig; // eslint-disable-line\n\n    const positionTextRegex = /([0-9!$@#%^*_+~=`\\[\\]\";'<>?.])+/ig; // eslint-disable-line\n\n    const phoneRegex = /^\\+(?:[0-9] ?){7,15}[0-9]$/;\n    let editedEmployees = copyOfEmployeesArr.map(employee => {\n      for (let key in employee) {\n        if (key === item.name && employee.inputId === item.id) {\n          if (item.type === 'tel') {\n            if (phoneRegex.test(item.value)) {\n              employee[key] = item.value;\n            } else if (!phoneRegex.test(item.value)) {\n              break;\n            }\n          } else if (item.type === 'text' && item.name !== 'id' && item.type !== 'tel' && (item.name === 'name' || item.name === 'surname')) {\n            if (!textRegex.test(item.value) && item.value !== '') {\n              employee[key] = item.value;\n            } else if (textRegex.test(item.value) || item.value === '') {\n              break;\n            }\n          } else if (item.type === 'text' && item.name !== 'id' && item.type !== 'tel' && item.name === 'position') {\n            if (!positionTextRegex.test(item.value) && item.value !== '') {\n              employee[key] = item.value;\n            } else if (positionTextRegex.test(item.value) || item.value === '') {\n              break;\n            }\n          } else {\n            employee[key] = item.value;\n          }\n        }\n      }\n\n      return employee;\n    });\n    setEmployees(editedEmployees);\n  }; // COMPARE INITIAL AND UPDATED\n\n\n  useEffect(() => {\n    let copyOfDataArr = JSON.parse(JSON.stringify(data));\n    let copyOfEmployeesArr = employees.slice();\n    const comparedEmloyeesArr = copyOfEmployeesArr.filter(employeeObj => {\n      return !copyOfDataArr.some(copyEmployeeObj => {\n        return copyEmployeeObj.id === employeeObj.id && copyEmployeeObj.name === employeeObj.name && copyEmployeeObj.surname === employeeObj.surname && copyEmployeeObj.dateOfBirth === employeeObj.dateOfBirth && copyEmployeeObj.position === employeeObj.position && copyEmployeeObj.phoneNumber === employeeObj.phoneNumber;\n      });\n    });\n    setUpdatedEmployees(comparedEmloyeesArr);\n  }, [employees]); // useEffect(() => {\n  //   console.log(updatedEmployees)\n  // }, [updatedEmployees])\n  // useEffect(() => {\n  //   console.log(deletedEmployees)\n  // }, [deletedEmployees])\n  // PAGINATION\n\n  const paginate = useCallback(pageNumber => {\n    const indexOfLastEmployee = pageNumber * employeesPerPage;\n    const indexOfFirstEmployee = indexOfLastEmployee - employeesPerPage;\n    const currentEmployees = employees.slice(indexOfFirstEmployee, indexOfLastEmployee);\n    setCurrentEmployees(currentEmployees);\n    setCurrentPage(pageNumber);\n  }, [employeesPerPage, employees]);\n  useEffect(() => {\n    paginate(currentPage);\n  }, [currentPage, paginate]); // HANDLE INPUT CHANGE EVENT\n\n  const handleChange = e => {\n    setSearchTerm(e.target.value);\n  }; // GET SEARCH RESULT\n\n\n  const getSearchResult = useCallback(() => {\n    const dateOfBirthRegex = /\\s+|[\\/-]/g; // eslint-disable-line\n\n    let results = [];\n    let copyOfEmployeesArr = employees.slice();\n\n    if (searchTerm === '' || searchTerm === null || searchTerm === ' ') {\n      setIsSearched(false);\n      paginate(currentPage);\n    } else {\n      results = copyOfEmployeesArr.filter(employee => employee.name.toLowerCase().includes(searchTerm.toLowerCase()) || employee.surname.toLowerCase().includes(searchTerm.toLowerCase()) || employee.id.toLowerCase().includes(searchTerm.toLowerCase()) || employee.dateOfBirth.replace(dateOfBirthRegex, '').includes(searchTerm.replace(dateOfBirthRegex, '')) || employee.position.toLowerCase().includes(searchTerm.toLowerCase()) || employee.phoneNumber.replace(/\\s+/g, '').includes(searchTerm.replace(/\\s+/g, '')));\n      setIsSearched(true);\n      setCurrentEmployees(results);\n    }\n  }, [searchTerm, employees, currentPage, paginate]); // GET RESULTS ON CHANGE EVENT (WHILE TYPING)\n\n  useEffect(() => {\n    getSearchResult();\n  }, [getSearchResult]); // GET RESULTS ON SUBMIT EVENT (AFTER CLICKING SEARCH ICON)\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    getSearchResult();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      value: {\n        employees,\n        updatedEmployees,\n        deletedEmployees,\n        isModalOpened,\n        updatedAndDeletedEmployees,\n        deleteEmployee,\n        showModal,\n        resetData,\n        handleEmployeeTableCell,\n        currentEmployees,\n        employeesPerPage,\n        currentPage,\n        paginate,\n        searchTerm,\n        isSearched,\n        handleChange,\n        handleSubmit\n      },\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          children: /*#__PURE__*/_jsxDEV(Grid, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/updated\",\n          children: /*#__PURE__*/_jsxDEV(UpdatedEmployeesList, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/deleted\",\n          children: /*#__PURE__*/_jsxDEV(DeletedEmployeesList, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"*\",\n          children: /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Z5AGUrxyP68jm7YkEiPqGek+lQw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/aytac/Documents/react-editable-table/src/App.js"],"names":["React","createContext","useState","useEffect","useCallback","BrowserRouter","Router","Route","Switch","UpdatedEmployeesList","DeletedEmployeesList","Grid","Navbar","Error","data","App","copyOfData","JSON","parse","stringify","employees","setEmployees","updatedEmployees","setUpdatedEmployees","deletedEmployees","setDeletedEmployees","isModalOpened","setIsModalOpened","updatedAndDeletedEmployees","setUpdatedAndDeletedEmployees","currentEmployees","setCurrentEmployees","currentPage","setCurrentPage","employeesPerPage","searchTerm","setSearchTerm","isSearched","setIsSearched","deleteEmployee","inputId","tempEmployees","mappedEmployees","map","employee","isDeleted","markedAsDeletedEmployees","filter","showModal","notDeletedEmployees","updatedEmployee","updated","deleted","resetData","handleEmployeeTableCell","e","str","target","id","arr","split","splice","length","idStr","join","item","name","value","type","copyOfEmployeesArr","slice","textRegex","positionTextRegex","phoneRegex","editedEmployees","key","test","copyOfDataArr","comparedEmloyeesArr","employeeObj","some","copyEmployeeObj","surname","dateOfBirth","position","phoneNumber","paginate","pageNumber","indexOfLastEmployee","indexOfFirstEmployee","handleChange","getSearchResult","dateOfBirthRegex","results","toLowerCase","includes","replace","handleSubmit","preventDefault"],"mappings":"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","sourcesContent":["import React, {createContext, useState, useEffect, useCallback} from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport UpdatedEmployeesList from './pages/UpdatedEmployeesList'\nimport DeletedEmployeesList from './pages/DeletedEmployeesList'\nimport Grid from './pages/Grid'\nimport Navbar from './components/Navbar'\nimport Error from './pages/Error'\n\nimport data from './data';\n\n\nconst App = () => {\n\n  let copyOfData = JSON.parse(JSON.stringify(data))\n    const [employees, setEmployees] = useState([...copyOfData])\n    const [updatedEmployees, setUpdatedEmployees] = useState([])\n    const [deletedEmployees, setDeletedEmployees] = useState([])\n    const [isModalOpened, setIsModalOpened] = useState(false)\n    const [updatedAndDeletedEmployees, setUpdatedAndDeletedEmployees] = useState({})\n    const [currentEmployees, setCurrentEmployees] = useState([])\n    const [currentPage, setCurrentPage] = useState(1)\n    const employeesPerPage = 10\n\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [isSearched, setIsSearched] = useState(false);\n    \n\n// DELETE EMPLOYEE\nconst deleteEmployee = (inputId) =>{\n  let tempEmployees = [...employees];\n  const mappedEmployees = tempEmployees.map(employee => {\n    if(employee.inputId === inputId){\n      if(employee.isDeleted){\n        employee.isDeleted = false;\n      }\n      else if(!employee.isDeleted){\n        employee.isDeleted = true;\n      }\n    }\n    return employee\n  })\n\n  const markedAsDeletedEmployees = mappedEmployees.filter(employee=> employee.isDeleted === true)\n  setDeletedEmployees(markedAsDeletedEmployees)\n  setEmployees(mappedEmployees)\n}\n\n// GET UPDATED AND DELETED LISTS\nconst showModal = ()=> {\nsetIsModalOpened(!isModalOpened)\nconst notDeletedEmployees = updatedEmployees.filter(updatedEmployee=> updatedEmployee.isDeleted !== true)\nlet updatedAndDeletedEmployees = {\n  updated: [...notDeletedEmployees],\n  deleted: [...deletedEmployees]\n}\n// console.log(updatedAndDeletedEmployees)\nsetUpdatedAndDeletedEmployees(updatedAndDeletedEmployees)\n}\n\n // RESET DATA\n const resetData = ()=> {\n  let copyOfData = JSON.parse(JSON.stringify(data))\n  setEmployees(copyOfData)\n  setDeletedEmployees([])\n  setUpdatedEmployees([])\n  \n}\n\n// EDITING TABLE CELLS\nconst handleEmployeeTableCell = (e) => {\n  let str = e.target.id;\n  let arr = str.split(\"\");\n  arr.splice(str.length - 6, str.length);\n  let idStr = arr.join('');\n\n  let item = {\n    id: idStr,\n    name: e.target.name,\n    value: e.target.value,\n    type: e.target.type\n  };\n  let copyOfEmployeesArr = employees.slice();\n\n  const textRegex = /([0-9-!$@#%^&*()_+|~=`{}\\[\\]:\";'<>?,.\\\\\\/])+/ig// eslint-disable-line\n  const positionTextRegex = /([0-9!$@#%^*_+~=`\\[\\]\";'<>?.])+/ig// eslint-disable-line\n  const phoneRegex = /^\\+(?:[0-9] ?){7,15}[0-9]$/;\n\n\n  let editedEmployees = copyOfEmployeesArr.map(employee=> {\n    for (let key in employee) {\n        if (key === item.name && employee.inputId === item.id) {\n          if(item.type==='tel'){\n            if(phoneRegex.test(item.value)){\n              employee[key] = item.value;\n            }\n            else if(!phoneRegex.test(item.value)){\n              break                  \n            }\n          }\n          else if(item.type==='text' && item.name!=='id'&&item.type!=='tel'&&(item.name==='name'||item.name==='surname')){\n            if(!textRegex.test(item.value) && item.value !==''){\n              employee[key] = item.value;\n            }\n            else if(textRegex.test(item.value) || item.value ===''){\n              break\n            }\n          }\n          else if(item.type==='text' && item.name!=='id'&&item.type!=='tel'&&item.name==='position'){\n            if(!positionTextRegex.test(item.value) && item.value !==''){\n              employee[key] = item.value;\n            }\n            else if(positionTextRegex.test(item.value) || item.value ===''){\n              break\n            }\n          }\n          else{\n             employee[key] = item.value;\n\n          }\n        }\n    }\n    return employee;\n  });\n\n    setEmployees(editedEmployees);  \n};\n\n// COMPARE INITIAL AND UPDATED\nuseEffect(() => {\n  let copyOfDataArr = JSON.parse(JSON.stringify(data))\n  let copyOfEmployeesArr = employees.slice();    \n\n  const comparedEmloyeesArr = copyOfEmployeesArr.filter(employeeObj=>{\n    return !copyOfDataArr.some(copyEmployeeObj=>{       \n      return copyEmployeeObj.id === employeeObj.id && copyEmployeeObj.name === employeeObj.name  && copyEmployeeObj.surname === employeeObj.surname && copyEmployeeObj.dateOfBirth === employeeObj.dateOfBirth && copyEmployeeObj.position === employeeObj.position && copyEmployeeObj.phoneNumber === employeeObj.phoneNumber      \n    });\n  });\n  setUpdatedEmployees(comparedEmloyeesArr)\n},[employees])\n\n // useEffect(() => {\n//   console.log(updatedEmployees)\n// }, [updatedEmployees])\n\n// useEffect(() => {\n//   console.log(deletedEmployees)\n// }, [deletedEmployees])\n\n// PAGINATION\nconst paginate = useCallback((pageNumber) => {\n    const indexOfLastEmployee = pageNumber * employeesPerPage;\n    const indexOfFirstEmployee = indexOfLastEmployee - employeesPerPage;\n    const currentEmployees = employees.slice(indexOfFirstEmployee, indexOfLastEmployee);\n    setCurrentEmployees(currentEmployees)\n    setCurrentPage(pageNumber)\n}, [employeesPerPage, employees])\n\nuseEffect(() => {\n  paginate(currentPage)\n}, [currentPage, paginate])\n\n// HANDLE INPUT CHANGE EVENT\nconst handleChange = e => {\n  setSearchTerm(e.target.value);\n};\n// GET SEARCH RESULT\nconst getSearchResult = useCallback(() => {\n  const  dateOfBirthRegex = /\\s+|[\\/-]/g// eslint-disable-line\n  let results = []\n  let copyOfEmployeesArr = employees.slice();\n  if(searchTerm === ''|| searchTerm === null || searchTerm === ' '){\n    setIsSearched(false)\n    paginate(currentPage)\n  }\n  else{\n    results = copyOfEmployeesArr.filter(employee => \n      employee.name.toLowerCase().includes(searchTerm.toLowerCase()) || employee.surname.toLowerCase().includes(searchTerm.toLowerCase()) || employee.id.toLowerCase().includes(searchTerm.toLowerCase()) || employee.dateOfBirth.replace(dateOfBirthRegex, '').includes(searchTerm.replace(dateOfBirthRegex, '')) || employee.position.toLowerCase().includes(searchTerm.toLowerCase()) || employee.phoneNumber.replace(/\\s+/g, '').includes(searchTerm.replace(/\\s+/g, ''))\n      )\n      setIsSearched(true)\n      setCurrentEmployees(results);\n  }\n\n}, [searchTerm, employees,currentPage, paginate])\n\n\n// GET RESULTS ON CHANGE EVENT (WHILE TYPING)\nuseEffect(() => {\n  getSearchResult()   \n},[getSearchResult]);  \n\n// GET RESULTS ON SUBMIT EVENT (AFTER CLICKING SEARCH ICON)\nconst handleSubmit = e => {\n  e.preventDefault()\n  getSearchResult()   \n};\n\n\n  return (\n    <Router>\n      <div value={{employees,updatedEmployees,deletedEmployees,isModalOpened,updatedAndDeletedEmployees,deleteEmployee,showModal,resetData,handleEmployeeTableCell,currentEmployees,employeesPerPage, currentPage, paginate, searchTerm, isSearched, handleChange, handleSubmit}}>\n      <Navbar/>\n        <Switch>\n          <Route exact path='/'>\n            <Grid/>\n          </Route>\n          <Route path='/updated'>\n            <UpdatedEmployeesList/>\n          </Route>\n          <Route path='/deleted'>\n            <DeletedEmployeesList/>\n          </Route>\n          <Route path='*'>\n            <Error/>\n          </Route>\n        </Switch>\n      </div>\n     \n    </Router>\n  )\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}